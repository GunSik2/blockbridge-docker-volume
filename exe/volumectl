#!/usr/bin/env ruby
# Copyright (c) 2015-2016, Blockbridge Networks LLC.  All rights reserved.
# Use of this source code is governed by a BSD-style license, found
# in the LICENSE file.

dev_lib = File.join(File.dirname(__FILE__), '..')
$LOAD_PATH.unshift(dev_lib)
$LOAD_PATH.unshift('/usr/src/app')

require 'bundler/setup'
require 'clamp'
require 'multi_json'
require 'restclient'
require 'restclient/components'
require 'uri'
require 'excon'
require 'pp'
require 'volume_driver/cli'

class Command < Clamp::Command
  include Blockbridge::Results

  def self.use(cls, opts = {})
    include cls
    instance_eval(&cls.send(:setup, opts))
  end

  def execute
    # wrap Clamp's 'execute' method to ensure any raised exceptions include
    # the final resolved command instance object. this allows any state that
    # was built up (e.g., while constructing api parameters) to be accessed
    # in the exception handling code. most importantly, this makes
    # generating pretty validation errors more-or-less automatic. (assuming
    # proper 'apiopt' params are defined)
    this_command_instance = self

    begin
      format_results self.exec
    rescue StandardError, Interrupt => e
      # add a command_instance attribute to whatever excetion was thrown,
      # and set it to the previously saved value of 'self'
      e.class.class_eval { attr_accessor :command_instance }
      e.command_instance = this_command_instance

      # and re-raise the same exception
      raise
    end

    # return self on success, too.
    self
  end

  # global options
  option('--machine', :flag, 'format output for machines')
  option('--debug', :flag, 'enable additional debug')
  option('--verbose', :flag, 'enable verbose output')
  option('--debug', :flag, 'enable additional debug')
  option(['--raw', '-R'], :flag, 'enable raw output')
  option('--yaml', :flag, 'print yaml for raw output')
  option('--api-proto', 'PROTO', 'specify endpoint protocol', default: 'http')
  option('--api-host', 'HOST', 'specify endpoint host', default: 'localhost')
  option('--api-port', 'PORT', 'specify endpoint port', default: 27001)
  option('--api-url', 'URL', 'specify endpoint url', attribute_name: :base_url)
  option('--api-token', '', 'specify bearer token',
         attribute_name: :bearer_auth)
  option('-u', 'USER:PASS', 'specify username & password basic auth',
         attribute_name: :basic_auth)
  option('-k', :flag, 'ignore tls certificate errors',
         attribute_name: :ignore_tls_errors)

  def default_base_url
    "#{api_proto}://#{api_host}:#{api_port}"
  end

  def machine?
    !!(ARGV.index('--machine'))
  end

  def debug?
    !!(ENV['BLOCKBRIDGE_DEBUG'].to_i != 0 || ARGV.index('--debug'))
  end

  def verbose?
    !!(ENV['BLOCKBRIDGE_VERBOSE'].to_i != 0 || ARGV.index('--verbose'))
  end

  # client class
  class Client
    attr_reader :client

    def initialize(prefix)
      @client ||= Excon.new('unix:///', :socket => "/var/run/docker/plugins/blockbridge/blockbridge.sock",
                            :headers => { 'Content-Type' => 'application/json' })
      @prefix = prefix
    end

    def create(params)
      req = request(:post, nil, params)
      client.request(req).body
    end

    def delete(params)
      req = request(:delete, params[:name], params)
      client.request(req)
    end

    def list
      req = request(:get, nil, nil)
      client.request(req).body
    end

    def backup(params)
      req = request(:put, "#{params[:name]}/backup", params)
      client.request(req).body
    end

    def inspect(params)
      req = request(:get, params[:name], params)
      client.request(req).body
    end

    def info
      req = request(:get, 'info', nil)
      client.request(req).body
    end

    private

    def request(method, path, body)
      Hash.new.tap do |h|
        h[:method] = method
        h[:path] = "/#{@prefix}"
        h[:path] += "/#{path}" if path
        h[:body] = MultiJson.dump(body) if body
        h[:expects] = (200..204).to_a << 304 << 400 << 404
      end
    end
  end

  # volume client
  def volume_api
    @volume_class ||= Client.new("volume")
  end

  # profile client
  def profile_api
    @profile_class ||= Client.new("profile")
  end

  def backup_api
    @backup_class ||= Client.new("backup")
  end

  def enum_check(val, options, fmt = nil)
    unless options.index(val)
      msg = (fmt || "must be one of: %s") % options.join(', ')
      raise ArgumentError.new(msg)
    end
    val
  end

  def display(*args)
    puts(*args)
  end

  def format_results(data, opts = {})
    return if data.nil? || data.empty?
    data = MultiJson.load(data) if data.is_a?(String)
    if machine?
      puts MultiJson.dump(data, pretty: true)
    else
      opts[:verbose] ||= verbose?
      opts[:debug]   ||= debug?
      opts[:cmd]       = self
      output = render(data, opts)
      display(output) unless output.nil? || output.empty?
    end
  end
end

class CreateCommand < Command
  option '--type', 'TYPE', 'volume type (autovol, autoclone, snappy)' do |val|
    enum_check(val, %w(autovol autoclone snappy))
  end
  option '--user', 'USER', 'volume owner'
  option '--access-token', 'TOKEN', 'API access token for user authentication'
  option '--capacity', 'CAPACITY', 'request volume capacity (bytes, N GiB, etc.)'
  option '--iops', 'IOPS', 'requested service IOPS'
  option '--transport', 'TRANSPORT', 'requested transport (tls, insecure, etc.)' do |val|
    enum_check(val, %w(tls insecure))
  end
  option '--from-backup', 'BACKUP', 'create disk from backup'

  def default_type
    'autovol' if user
  end

  def create_params
    Hash.new.tap { |h|
      h[:name]         = name 
      h[:type]         = type
      h[:user]         = user
      h[:access_token] = access_token
      h[:capacity]     = capacity
      h[:iops]         = iops
      h[:transport]    = transport
      h[:attributes]   = attributes.join(' ') if attributes.length > 0
      h[:from_backup]  = from_backup
    }.reject { |_, v| v.nil? }
  end

  def volume_create_params
    create_params.tap { |h|
      h[:profile] = profile
      h[:otp]     = otp
    }.reject { |_, v| v.nil? }
  end
end

class VolumeCreate < CreateCommand
  option '--name', 'VOLUME', 'volume name', :required => true
  option '--profile', 'PROFILE', 'storage profile'
  option '--otp', 'OTP', 'one time password authentication'
  parameter '[ATTRIBUTES] ...', 'provisioning attributes (+tag to include, -tag to exclude)', :attribute_name => :attributes

  def exec
    volume_api.create(volume_create_params)
  end
end

class VolumeRemove < Command
  option '--name', 'VOLUME', 'volume name', :required => true
  option '--otp', 'OTP', 'one time password authentication'

  def volume_remove_params
    Hash.new.tap { |h|
      h[:name] = name
      h[:otp]  = otp
    }.reject { |_, v| v.nil? }
  end

  def exec
    volume_api.delete(volume_remove_params).body
  end
end

class VolumeInspect < Command
  option '--name', 'VOLUME', 'volume name'
  def exec
    volume_api.inspect(name: name)
  end
end

class VolumeList < Command
  def exec
    volume_api.list
  end
end

class VolumeBackup < Command
  parameter 'NAME', 'volume name'
  parameter '[BACKUP-NAME]', 'backup to specific object-store backup name'
  def exec
    volume_api.backup(name: name, backup_name: backup_name)
  end
end

class VolumeCommand < Command
  subcommand 'create', 'create a volume', VolumeCreate
  subcommand ['remove', 'rm'], 'remove a volume', VolumeRemove
  subcommand 'inspect', 'inspect a volume', VolumeInspect
  subcommand ['list', 'ls'], 'show all volumes', VolumeList
  subcommand 'backup', 'backup a volume', VolumeBackup
end

class ProfileCreate < CreateCommand
  option '--name', 'PROFILE', 'profile name', :required => true
  parameter '[ATTRIBUTES] ...', 'provisioning attributes (+tag to include, -tag to exclude)', :attribute_name => :attributes

  def exec
    profile_api.create(create_params)
  end
end

class ProfileRemove < Command
  option '--name', 'PROFILE', 'profile name', :required => true

  def exec
    profile_api.delete(name: name).body
  end
end

class ProfileUpdate < Command
  def exec
  end
end

class ProfileInspect < Command
  option '--name', 'PROFILE', 'profile name'
  def exec
    profile_api.inspect(name: name)
  end
end

class ProfileList < Command
  def exec
    profile_api.list
  end
end

class ProfileCommand < Command
  subcommand 'create', 'create a profile', ProfileCreate
  subcommand 'update', 'update a profile', ProfileUpdate
  subcommand ['remove', 'rm'], 'remove a profile', ProfileRemove
  subcommand 'inspect', 'inspect a profile', ProfileInspect
  subcommand ['list', 'ls'], 'list all profiles', ProfileList
end

class BackupList < Command
  def exec
    backup_api.list
  end
end

class BackupInspect < Command
  parameter 'BACKUP', 'backup to inspect'

  def exec
    backup_api.inspect(name: backup)
  end
end

class BackupRemove < Command
  parameter 'BACKUP', 'backup to remove'

  def exec
    backup_api.delete(name: backup).body
  end
end

class BackupInfo < Command
  def exec
    backup_api.info
  end
end

class BackupCommand < Command
  subcommand ['list', 'ls'], 'list backups', BackupList
  subcommand 'inspect', 'inspect backup', BackupInspect
  subcommand ['remove', 'rm'], 'remove backup', BackupRemove
  subcommand 'info', 'list S3 object store info', BackupInfo
end

class VolumeControl < Command
  subcommand 'volume', 'manage volumes', VolumeCommand
  subcommand 'profile', 'manage volume profiles', ProfileCommand
  subcommand 'backup', 'manage volume backups', BackupCommand
end

if __FILE__ == $0
  CliMain.new(VolumeControl, ARGV.dup).execute!
end
